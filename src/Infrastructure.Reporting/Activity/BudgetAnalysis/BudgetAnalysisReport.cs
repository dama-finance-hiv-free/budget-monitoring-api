using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Dama.Core.Common.Helpers;
using Dama.Fin.Domain.Contracts.Service.Report;
using Dama.Fin.Domain.Vm.Budgeting;
using iTextSharp.text;
using iTextSharp.text.pdf;

namespace Dama.Fin.Infrastructure.Reporting.Activity.BudgetAnalysis
{
    public class BudgetAnalysisReport : IBudgetAnalysisReport
    {
        public async Task<byte[]> GenerateAsync(List<BudgetAnalysisVm> data, BudgetAnalysisOptions options)
        {
            if (data == null)
                throw new InvalidEnumArgumentException(nameof(data));

            if (options == null)
                throw new InvalidEnumArgumentException(nameof(options));

            await using var ms = new MemoryStream();
            var document = new Document(PageSize.A4.Rotate(), 25, 25, 30, 1);
            var writer = PdfWriter.GetInstance(document, ms);
            document.Open();

            var cb = writer.DirectContent;

            document.Add(GetReportHeader(options));
            document.Add(GetReportBody(data));

            WritePageFooter(cb, writer);

            document.Close();
            writer.Close();

            var reportBytes = ms.ToArray();

            ms.Close();
            return reportBytes;
        }

        private static void WritePageFooter(PdfContentByte cb, PdfWriter writer)
        {
            var bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);

            cb.BeginText();
            cb.SetFontAndSize(bfTimes, 9);

            cb.SetLineWidth(0f);
            cb.MoveTo(30, 40);
            cb.LineTo(815, 40);
            cb.Stroke();

            cb.SetTextMatrix(30, 20);
            cb.ShowText($"Page {writer.PageNumber} of {writer.PageNumber}");

            //cb.SetTextMatrix(400, 20);
            cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Generated by Dama Finance", 407, 20, 0);

            cb.EndText();
        }

        private static Font GetFont(float fontSize, int fontStyle, string fontName = "Tahoma") =>
            FontFactory.GetFont(fontName, fontSize, fontStyle);

        private static PdfPTable GetReportHeader(BudgetAnalysisOptions options)
        {
            var table = new PdfPTable(3)
            {
                WidthPercentage = 100,
                HorizontalAlignment = Element.ALIGN_LEFT
            }; 

            WriteReportHeader(table, options);

            return table;
        }

        private static void WriteReportHeader(PdfPTable table, BudgetAnalysisOptions options)
        {
            var titleFont = GetFont(13f, 1);
            var subTitleBoldFont = GetFont(10f, 1);
            var subTitleFont = GetFont(10f, 0);
            var emptyRowFont = GetFont(6f, 0);
            var printPeriodFont = GetFont(10f, 0);

            const int maxColumn = 3;

            WriteRow(table, "CAMEROON BAPTIST CONVENTION HEALTH SERVICES", maxColumn, titleFont);
            WriteRow(table, "CDC/PEPFAR HIV FREE PROJECT ZONE I", maxColumn, subTitleFont);
            WriteRow(table, "", maxColumn, emptyRowFont);
            WriteRow(table, $"{options.ReportTitle.ToUpper()}", maxColumn, subTitleBoldFont);
            WriteEmptyRow(table, "", 1, maxColumn, emptyRowFont);
            WriteRow(table, $"PERIOD FROM {options.StartDate.ToShortDateFormat()} - {options.EndDate.ToShortDateFormat()}", maxColumn, printPeriodFont);
            WriteEmptyRow(table, "", 1, maxColumn, emptyRowFont);
            WriteRow(table, $"{options.Region.ToUpper()} REGION", maxColumn, printPeriodFont);
            WriteEmptyRow(table, "", 2, maxColumn, emptyRowFont);
        }

        private static void WriteRow(PdfPTable table, string text, int colSpan, Font font,
            int horizontalAlignment = Element.ALIGN_CENTER, int border = 0, int extraParagraphSpace = 0)
        {
            var cell = new PdfPCell(new Phrase(text, font))
            {
                Colspan = colSpan,
                HorizontalAlignment = horizontalAlignment,
                Border = border,
                ExtraParagraphSpace = extraParagraphSpace
            };
            table.AddCell(cell);
            table.CompleteRow();
        }

        private static void WriteEmptyRow(PdfPTable table, string text, int nCount, int colSpan, Font font,
            int horizontalAlignment = Element.ALIGN_CENTER, int border = 0, int extraParagraphSpace = 0)
        {
            for (var i = 1; i <= nCount; i++)
            {
                var cell = new PdfPCell(new Phrase(text, font))
                {
                    Colspan = colSpan,
                    HorizontalAlignment = horizontalAlignment,
                    Border = border,
                    ExtraParagraphSpace = extraParagraphSpace
                };
                table.AddCell(cell);
                table.CompleteRow();
            }
        }

        private static PdfPTable GetReportBody(List<BudgetAnalysisVm> data)
        {
            var table = new PdfPTable(11)
            {
                WidthPercentage = 100,
                HorizontalAlignment = Element.ALIGN_LEFT
            };

            SetTableColumnWidths(table);

            //table.HeaderRows = 2;

            //Report Header
            WritePageHeader(table);

            var font = GetFont(8f, 0);
            // detail table body
            foreach (var activityPlan in data)
            {
                WriteReportDetail(table, activityPlan.Code, font, BaseColor.White);
                WriteReportDetail(table, activityPlan.Description, font, BaseColor.White, Element.ALIGN_LEFT);
                WriteReportDetail(table, activityPlan.M01.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.M02.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.M03.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.M04.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.M05.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.M06.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.M07.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.M08.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
                WriteReportDetail(table, activityPlan.TotalExpenditure.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            }

            //Report Totals
            //WriteReportFooter(table, data);

            return table;
        }

        private static void WriteReportFooter(PdfPTable table, IReadOnlyCollection<BudgetAnalysisVm> data)
        {
            var font = GetFont(8f, 0);

            WriteReportDetail(table, "", font, BaseColor.White);
            WriteReportDetail(table, "TOTAL", font, BaseColor.White, Element.ALIGN_LEFT);
            WriteReportDetail(table, data.Sum(x => x.M01).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.M02).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.M03).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.M04).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.M05).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.M06).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.M07).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.M08).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, data.Sum(x => x.TotalExpenditure).ToString("##,##0"), font, BaseColor.White,
                Element.ALIGN_RIGHT);
        }

        private static void WritePageHeader(PdfPTable table)
        {
            var font = GetFont(8f, 0);

            WriteReportDetail(table, "SN", font, BaseColor.Gray);
            WriteReportDetail(table, "DESCRIPTION", font, BaseColor.Gray);
            WriteReportDetail(table, "HTXS", font, BaseColor.Gray);
            WriteReportDetail(table, "HVCT", font, BaseColor.Gray);
            WriteReportDetail(table, "HVSI", font, BaseColor.Gray);
            WriteReportDetail(table, "MTCT", font, BaseColor.Gray);
            WriteReportDetail(table, "PDTX", font, BaseColor.Gray);
            WriteReportDetail(table, "PrEP", font, BaseColor.Gray);
            WriteReportDetail(table, "VL", font, BaseColor.Gray);
            WriteReportDetail(table, "PrEP F", font, BaseColor.Gray);
            WriteReportDetail(table, "TOTAL", font, BaseColor.Gray);

            table.CompleteRow();
        }

        private static void WriteReportDetail(PdfPTable table, string text, Font font, BaseColor backgroundColor,
            int horizontalAlignment = Element.ALIGN_CENTER, int verticalAlignment = Element.ALIGN_MIDDLE)
        {
            var cell = new PdfPCell(new Phrase(text, font))
            {
                HorizontalAlignment = horizontalAlignment,
                VerticalAlignment = verticalAlignment,
                BackgroundColor = backgroundColor,
                Padding = 4,
                NoWrap = true,
                UseBorderPadding = true
            };
            table.AddCell(cell);
        }

        private static void SetTableColumnWidths(PdfPTable table)
        {
            var sizes = new float[11];
            const int w = 30;
            for (var i = 0; i < 11; i++)
            {
                sizes[i] = i switch
                {
                    0 => 15,
                    1 => 125,
                    2 => w,
                    3 => w,
                    4 => w,
                    5 => w,
                    6 => w,
                    7 => w,
                    8 => w,
                    9 => w,
                    10 => w,
                    _ => sizes[i]
                };
            }

            table.SetWidths(sizes);
        }
    }
}
