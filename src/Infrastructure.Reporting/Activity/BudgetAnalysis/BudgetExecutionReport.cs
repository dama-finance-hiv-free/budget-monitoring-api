using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Dama.Core.Common.Helpers;
using Dama.Fin.Domain.Contracts.Service.Report;
using Dama.Fin.Domain.Vm;
using Dama.Fin.Domain.Vm.Budgeting;
using iTextSharp.text;
using iTextSharp.text.pdf;

namespace Dama.Fin.Infrastructure.Reporting.Activity.BudgetAnalysis;
 
public class BudgetExecutionReport : IBudgetExecutionReport 
{
    static int _numberOfCols = 6;
    static int _totalPages = 0;

    

    public byte[] Generate(ReportFileVm[] report)
    {
        return null;
    }

    public async Task<byte[]> GenerateAsync(List<BudgetExecutionVm> data, BudgetAnalysisOptions options)
    {
        if (data == null)
            throw new InvalidEnumArgumentException(nameof(data));

        if (options == null)
            throw new InvalidEnumArgumentException(nameof(options));

        await using var ms = new MemoryStream();
        var document = new Document(PageSize.A4.Rotate(), 25, 25, 30, 25);
        var writer = PdfWriter.GetInstance(document, ms);
        writer.PageEvent = new PageNumberEventHandler();
        document.Open();

        var cb = writer.DirectContent;
        document.Add(GetReportHeader(options));
        document.Add(GetReportBody(data, cb, writer, document));

        //WritePageFooter(cb, writer);
        //_totalPages = writer.PageNumber;

        document.Close();
        writer.Close();

        var reportBytes = ms.ToArray();
        //var reader = new PdfReader(reportBytes);
        //_totalPages = reader.NumberOfPages;

        ms.Close();
        return reportBytes;
    }

    private static void WritePageFooter(PdfContentByte cb, PdfWriter writer)
    {
        var bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);

        cb.BeginText();
        cb.SetFontAndSize(bfTimes, 9);

        cb.SetLineWidth(0f);
        cb.MoveTo(30, 40);
        cb.LineTo(815, 40);
        cb.Stroke();

        cb.SetTextMatrix(30, 20);
        cb.ShowText($"Page {writer.PageNumber} of {_totalPages}");

        //cb.SetTextMatrix(400, 20);
        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Generated by Dama Finance", 407, 20, 0);

        cb.EndText();
    }

    private static Font GetFont(float fontSize, int fontStyle, string fontName = "Tahoma") =>
        FontFactory.GetFont(fontName, fontSize, fontStyle);

    private static PdfPTable GetReportHeader(BudgetAnalysisOptions options)
    {
        PdfPTable table = new PdfPTable(3)
        {
            WidthPercentage = 100,
            HorizontalAlignment = Element.ALIGN_LEFT
        };

        table.HeaderRows = 1;

        WriteReportHeader(table, options);

        return table;
    }

    private static void WriteReportHeader(PdfPTable table, BudgetAnalysisOptions options)
    {
        var titleFont = GetFont(13f, 1);
        var subTitleBoldFont = GetFont(10f, 1);
        var subTitleFont = GetFont(10f, 0);
        var emptyRowFont = GetFont(6f, 0);
        var printPeriodFont = GetFont(10f, 0);

        const int maxColumn = 3;

        WriteRow(table, "CAMEROON BAPTIST CONVENTION HEALTH SERVICES", maxColumn, titleFont);
        WriteRow(table, "CDC/PEPFAR HIV FREE PROJECT ZONE I", maxColumn, subTitleFont);
        WriteRow(table, "", maxColumn, emptyRowFont);
        WriteRow(table, $"{options.ReportTitle.ToUpper()}", maxColumn, subTitleBoldFont);
        WriteEmptyRow(table, "", 1, maxColumn, emptyRowFont);
        WriteRow(table, $"PERIOD FROM {options.StartDate.ToShortDateFormat()} - {options.EndDate.ToShortDateFormat()}", maxColumn, printPeriodFont);
        WriteEmptyRow(table, "", 1, maxColumn, emptyRowFont);
        WriteRow(table, $"{options.Region.ToUpper()} REGION", maxColumn, printPeriodFont);
        WriteEmptyRow(table, "", 2, maxColumn, emptyRowFont);
    }

    private static void WriteRow(PdfPTable table, string text, int colSpan, Font font,
        int horizontalAlignment = Element.ALIGN_CENTER, int border = 0, int extraParagraphSpace = 0)
    {
        var cell = new PdfPCell(new Phrase(text, font))
        {
            Colspan = colSpan,
            HorizontalAlignment = horizontalAlignment,
            Border = border,
            ExtraParagraphSpace = extraParagraphSpace
        };
        table.AddCell(cell);
        table.CompleteRow();
    }

    private static void WriteEmptyRow(PdfPTable table, string text, int nCount, int colSpan, Font font,
        int horizontalAlignment = Element.ALIGN_CENTER, int border = 0, int extraParagraphSpace = 0)
    {
        for (var i = 1; i <= nCount; i++)
        {
            var cell = new PdfPCell(new Phrase(text, font))
            {
                Colspan = colSpan,
                HorizontalAlignment = horizontalAlignment,
                Border = border,
                ExtraParagraphSpace = extraParagraphSpace
            };
            table.AddCell(cell);
            table.CompleteRow();
        }
    }

    private static PdfPTable GetReportBody(List<BudgetExecutionVm> data, PdfContentByte cb = null, PdfWriter writer = null, Document document = null)
    {
        // int pageCount = 1;

        var table = new PdfPTable(_numberOfCols)
        {
            WidthPercentage = 100,
            HorizontalAlignment = Element.ALIGN_LEFT
        };

        SetTableColumnWidths(table);

        table.HeaderRows = 1;

        //Report Header
        WritePageHeader(table);

        var font = GetFont(9f, 0);

        // detail table body
        foreach (var budgetExecution in data)
        {
            WriteReportDetail(table, budgetExecution.Code, font, BaseColor.White);
            WriteReportDetail(table, GetLineDescription(budgetExecution.Description), font, BaseColor.White, Element.ALIGN_LEFT);
            WriteReportDetail(table, budgetExecution.Budgeted.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, budgetExecution.Accumulated.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, budgetExecution.Actual.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
            WriteReportDetail(table, budgetExecution.Balance.ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
        }


        //Report Totals
        WriteReportFooter(table, data);

        return table;
    }

    private static string GetLineDescription(string description)
    {
        if(description.Length > 50)
        {
            return description.Substring(0, 50) + "...";
        }
        return description;
    }

    private static void WriteReportFooter(PdfPTable table, IReadOnlyCollection<BudgetExecutionVm> data)
    {
        var font = GetFont(9f, 0);

        WriteReportDetail(table, "", font, BaseColor.White);
        WriteReportDetail(table, "TOTAL", font, BaseColor.White, Element.ALIGN_LEFT);
        WriteReportDetail(table, data.Sum(x => x.Budgeted).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
        WriteReportDetail(table, data.Sum(x => x.Accumulated).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
        WriteReportDetail(table, data.Sum(x => x.Actual).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
        WriteReportDetail(table, data.Sum(x => x.Balance).ToString("##,##0"), font, BaseColor.White, Element.ALIGN_RIGHT);
        //WriteReportDetail(table, data.Sum(x => x.Balance).ToString("##,##0"), font, BaseColor.White,
            //Element.ALIGN_RIGHT);
    }

    private static void WritePageHeader(PdfPTable table)
    {
        var font = GetFont(9f, 0);

        WriteReportDetail(table, "CODE", font, BaseColor.Gray);
        WriteReportDetail(table, "DESCRIPTION", font, BaseColor.Gray);
        WriteReportDetail(table, "BUDGETED AMT", font, BaseColor.Gray);
        WriteReportDetail(table, "ACC EXP", font, BaseColor.Gray);
        WriteReportDetail(table, "ACTUAL PERIOD", font, BaseColor.Gray);
        WriteReportDetail(table, "VARIANTS", font, BaseColor.Gray);

        table.CompleteRow();
    }

    private static void WriteReportDetail(PdfPTable table, string text, Font font, BaseColor backgroundColor,
        int horizontalAlignment = Element.ALIGN_CENTER, int verticalAlignment = Element.ALIGN_MIDDLE)
    {
        var cell = new PdfPCell(new Phrase(text, font))
        {
            HorizontalAlignment = horizontalAlignment,
            VerticalAlignment = verticalAlignment,
            BackgroundColor = backgroundColor,
            Padding = 4,
            NoWrap = false,
            UseBorderPadding = true
        };
        table.AddCell(cell);
    }

    private static void SetTableColumnWidths(PdfPTable table)
    {
        var sizes = new float[_numberOfCols];
        const int w = 30;
        for (var i = 0; i < _numberOfCols; i++)
        {
            sizes[i] = i switch
            {
                0 => 30,
                1 => 120,
                2 => w,
                3 => w,
                4 => w,
                5 => w,
                _ => sizes[i]
            };
        }

        table.SetWidths(sizes);
    }

}

public class PageNumberEventHandler : PdfPageEventHelper
{
    public override void OnEndPage(PdfWriter writer, Document document)
    {
        base.OnEndPage(writer, document);

        // Create a PdfContentByte object
        PdfContentByte cb = writer.DirectContent;

        // Set the font and size for page number
        BaseFont bf = BaseFont.CreateFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
        cb.SetFontAndSize(bf, 10);

        cb.BeginText();
        cb.SetFontAndSize(bf, 8);

        cb.SetLineWidth(0f);
        cb.MoveTo(30, 40);
        cb.LineTo(815, 40);
        cb.Stroke();

        cb.SetTextMatrix(30, 20);
        cb.ShowText($"Page {writer.PageNumber}");
        //cb.ShowText($"Page {writer.PageNumber} of {_totalPages}");

        //cb.SetTextMatrix(400, 20);
        cb.ShowTextAligned(PdfContentByte.ALIGN_CENTER, "Generated by Dama Finance", 407, 20, 0);

        cb.EndText();
    }
}
