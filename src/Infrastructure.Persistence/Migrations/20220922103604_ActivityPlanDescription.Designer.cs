// <auto-generated />
using System;
using Dama.Fin.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Immunization.Campaign.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MonitoringContext))]
    [Migration("20220922103604_ActivityPlanDescription")]
    partial class ActivityPlanDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Activity", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Batch")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("batch");

                    b.Property<string>("BatchLine")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("batch_line");

                    b.Property<string>("BatchLineDetail")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("batch_line_detail");

                    b.Property<string>("Project")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("account");

                    b.Property<string>("AccountLine")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("account_line");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("activity");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("activity_type");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("Approach")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("approach");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("branch");

                    b.Property<string>("BudgetCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("budget_code");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("component");

                    b.Property<string>("CopYear")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("CostCategory")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cost_category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("description");

                    b.Property<string>("Donor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("donor");

                    b.Property<string>("Intervention")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("intervention");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("objective");

                    b.Property<string>("Product")
                        .HasColumnType("text")
                        .HasColumnName("product");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("region");

                    b.Property<string>("Runner")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner");

                    b.Property<string>("Sense")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("sense");

                    b.Property<DateTime>("ServerDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("server_date");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("site");

                    b.Property<string>("TranCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tran_code");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("user_code");

                    b.Property<string>("Voucher")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("voucher");

                    b.HasKey("Tenant", "Batch", "BatchLine", "BatchLineDetail", "Project")
                        .HasName("pk_activity");

                    b.ToTable("activity", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.ActivityHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Batch")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("batch");

                    b.Property<string>("BatchLine")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("batch_line");

                    b.Property<string>("BatchLineDetail")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("batch_line_detail");

                    b.Property<string>("Project")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("account");

                    b.Property<string>("AccountLine")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("account_line");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("activity");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("activity_type");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<string>("Approach")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("approach");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("branch");

                    b.Property<string>("BudgetCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("budget_code");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("component");

                    b.Property<string>("CopYear")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("CostCategory")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cost_category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("description");

                    b.Property<string>("Donor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("donor");

                    b.Property<string>("Intervention")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("intervention");

                    b.Property<string>("Objective")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("objective");

                    b.Property<string>("Product")
                        .HasColumnType("text")
                        .HasColumnName("product");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("region");

                    b.Property<string>("Runner")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner");

                    b.Property<string>("Sense")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("sense");

                    b.Property<DateTime>("ServerDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("server_date");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("site");

                    b.Property<string>("TranCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("tran_code");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("user_code");

                    b.Property<string>("Voucher")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("voucher");

                    b.HasKey("Tenant", "Batch", "BatchLine", "BatchLineDetail", "Project")
                        .HasName("pk_activity_history");

                    b.ToTable("activity_history", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.ActivityPlan", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("activity_type");

                    b.Property<string>("BudgetCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("budget_code");

                    b.Property<string>("CostCategory")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cost_category");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(350)
                        .IsUnicode(false)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("description");

                    b.Property<string>("Intervention")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("intervention");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_activity_plan");

                    b.ToTable("activity_plan", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Budget", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("project");

                    b.Property<string>("Activity")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("activity");

                    b.Property<string>("Component")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("component");

                    b.Property<string>("Region")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("region");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("Tenant", "CopYear", "Project", "Activity", "Component", "Region")
                        .HasName("pk_budget");

                    b.ToTable("budget", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.BudgetCode", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("CopYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cop_year");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Tenant", "Code", "CopYear")
                        .HasName("pk_budget_code");

                    b.ToTable("budget_code", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.BudgetHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("project");

                    b.Property<string>("Activity")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("activity");

                    b.Property<string>("Component")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("component");

                    b.Property<string>("Region")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("region");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("Tenant", "CopYear", "Project", "Activity", "Component", "Region")
                        .HasName("pk_budget_history");

                    b.ToTable("budget_history", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Component", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("CopYear")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("project");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("long_description");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Tenant", "Code", "CopYear", "Project")
                        .HasName("pk_component");

                    b.ToTable("component", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.CopYear", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_cop_year");

                    b.ToTable("cop_year", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.CopYearBudgetCode", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("project");

                    b.Property<string>("BudgetCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("budget_code");

                    b.HasKey("Tenant", "CopYear", "Project", "BudgetCode")
                        .HasName("pk_cop_year_budget_code");

                    b.ToTable("cop_year_budget_code", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.CopYearCostCategory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("project");

                    b.Property<string>("CostCategory")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cost_category");

                    b.HasKey("Tenant", "CopYear", "Project", "CostCategory")
                        .HasName("pk_cop_year_cost_category");

                    b.ToTable("cop_year_cost_category", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.CopYearIntervention", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("project");

                    b.Property<string>("Intervention")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("intervention");

                    b.HasKey("Tenant", "CopYear", "Project", "Intervention")
                        .HasName("pk_cop_year_intervention");

                    b.ToTable("cop_year_intervention", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.CopYearSite", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("project");

                    b.Property<string>("Site")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("site");

                    b.HasKey("Tenant", "CopYear", "Project", "Site")
                        .HasName("pk_cop_year_site");

                    b.ToTable("cop_year_site", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.CostCategory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("CopYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Project")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("project");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.HasKey("Tenant", "Code", "CopYear", "Project")
                        .HasName("pk_cost_category");

                    b.ToTable("cost_category", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.District", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Project")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("project");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("Region")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("region");

                    b.HasKey("Tenant", "CopYear", "Code", "Project")
                        .HasName("pk_district");

                    b.ToTable("district", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.IncludeRunner", b =>
                {
                    b.Property<string>("User")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("user");

                    b.Property<string>("Runner")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("runner");

                    b.HasKey("User", "Runner")
                        .HasName("pk_include_runner");

                    b.ToTable("include_runner", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Intervention", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Project")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("project");

                    b.Property<string>("BudgetCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("budget_code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<double>("Percentage")
                        .HasColumnType("double precision")
                        .HasColumnName("percentage");

                    b.HasKey("Tenant", "CopYear", "Code", "Project")
                        .HasName("pk_intervention");

                    b.ToTable("intervention", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Milestone", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Project")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("project");

                    b.Property<string>("Runner")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("runner");

                    b.Property<string>("Activity")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("activity");

                    b.Property<string>("Site")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("site");

                    b.Property<double>("Achievement")
                        .HasColumnType("double precision")
                        .HasColumnName("achievement");

                    b.Property<double>("Budget")
                        .HasColumnType("double precision")
                        .HasColumnName("budget");

                    b.Property<string>("BudgetNote")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("budget_note");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("region");

                    b.Property<double>("Target")
                        .HasColumnType("double precision")
                        .HasColumnName("target");

                    b.HasKey("Tenant", "Project", "Runner", "Activity", "Site")
                        .HasName("pk_milestone");

                    b.ToTable("milestone", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Project", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_project");

                    b.ToTable("project", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Quarter", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("CopYear")
                        .HasColumnType("text")
                        .HasColumnName("cop_year");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_quarter");

                    b.ToTable("quarter", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Region", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("Initial")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("initial");

                    b.Property<string>("Zone")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("zone");

                    b.HasKey("Code")
                        .HasName("pk_region");

                    b.ToTable("region", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RegionRunnerPeriod", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Runner")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner");

                    b.Property<string>("Region")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("region");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("Tenant", "Runner", "Region")
                        .HasName("pk_region_runner_period");

                    b.ToTable("region_runner_period", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Runner", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("Region")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("region");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("component");

                    b.Property<string>("ComponentWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("component_week");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("MilestoneProjection")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("milestone_projection");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("month");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("week");

                    b.Property<string>("YearWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("year_week");

                    b.HasKey("Tenant", "CopYear", "Code", "Region")
                        .HasName("pk_runner");

                    b.ToTable("runner", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerComponent", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Runner")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner");

                    b.Property<string>("Project")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project");

                    b.Property<string>("Component")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("component");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("Tenant", "Runner", "Project", "Component")
                        .HasName("pk_runner_component");

                    b.ToTable("runner_component", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerComponentHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Runner")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner");

                    b.Property<string>("Project")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project");

                    b.Property<string>("Component")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("component");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("Tenant", "Runner", "Project", "Component")
                        .HasName("pk_runner_component_history");

                    b.ToTable("runner_component_history", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("CopYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("Region")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("region");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("component");

                    b.Property<string>("ComponentWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("component_week");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("MilestoneProjection")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("milestone_projection");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("month");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("week");

                    b.Property<string>("YearWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("year_week");

                    b.HasKey("Tenant", "CopYear", "Code", "Region")
                        .HasName("pk_runner_history");

                    b.ToTable("runner_history", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerPeriod", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("code");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("component");

                    b.Property<string>("ComponentWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("component_week");

                    b.Property<string>("CopYear")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("cop_year");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("MilestoneProjection")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("milestone_projection");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("month");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("week");

                    b.Property<string>("YearWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("year_week");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_runner_period");

                    b.ToTable("runner_period", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerPeriodComponent", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("RunnerPeriod")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner_period");

                    b.Property<string>("Project")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project");

                    b.Property<string>("Component")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("component");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("Tenant", "RunnerPeriod", "Project", "Component")
                        .HasName("pk_runner_period_component");

                    b.ToTable("runner_period_component", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerPeriodComponentHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("RunnerPeriod")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner_period");

                    b.Property<string>("Project")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("project");

                    b.Property<string>("Component")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("component");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("Tenant", "RunnerPeriod", "Project", "Component")
                        .HasName("pk_runner_period_component_history");

                    b.ToTable("runner_period_component_history", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerPeriodHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("code");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("component");

                    b.Property<string>("ComponentWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("component_week");

                    b.Property<string>("CopYear")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("cop_year");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("MilestoneProjection")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("milestone_projection");

                    b.Property<string>("Month")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("month");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<string>("Week")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("week");

                    b.Property<string>("YearWeek")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("year_week");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_runner_period_history");

                    b.ToTable("runner_period_history", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerPeriodStatus", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("description");

                    b.HasKey("Code")
                        .HasName("pk_runner_period_status");

                    b.ToTable("runner_period_status", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.RunnerStatus", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("description");

                    b.HasKey("Code")
                        .HasName("pk_runner_status");

                    b.ToTable("runner_status", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Site", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("description");

                    b.Property<string>("District")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("district");

                    b.Property<string>("Project")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("project");

                    b.Property<string>("SiteTier")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("site_tier");

                    b.Property<string>("SiteType")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("site_type");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_site");

                    b.ToTable("site", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.SiteType", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("description");

                    b.HasKey("Code")
                        .HasName("pk_site_type");

                    b.ToTable("site_type", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.TransactionCode", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("description");

                    b.HasKey("Code")
                        .HasName("pk_transaction_code");

                    b.ToTable("transaction_code", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.UserCoordination", b =>
                {
                    b.Property<string>("User")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("user");

                    b.Property<string>("Coordination")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("coordination");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.HasKey("User", "Coordination")
                        .HasName("pk_user_coordination");

                    b.ToTable("user_coordination", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Budgeting.Zone", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("description");

                    b.HasKey("Code")
                        .HasName("pk_zone");

                    b.ToTable("zone", "budgeting");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.Branch", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("branch_name");

                    b.Property<string>("BranchShortName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("branch_short_name");

                    b.Property<string>("BranchTown")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("branch_town");

                    b.Property<string>("BranchType")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("branch_type");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("HeadOffice")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("head_office");

                    b.Property<string>("Project")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("project");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("region");

                    b.Property<string>("StationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("station_code");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("telephone");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_branch");

                    b.ToTable("branch", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.BranchStation", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Branch")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("branch");

                    b.Property<string>("Station")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("station");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.HasKey("Tenant", "Branch", "Station")
                        .HasName("pk_branch_station");

                    b.ToTable("branch_station", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.DateGeneration", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Branch")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("branch");

                    b.Property<DateTime>("LastTransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_trans_date");

                    b.Property<DateTime>("MonthEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("month_end");

                    b.Property<DateTime>("MonthStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("month_start");

                    b.Property<DateTime>("PrevDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("prev_day");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.Property<string>("TransDay")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("trans_day");

                    b.Property<string>("TransMonth")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("trans_month");

                    b.Property<string>("TransYear")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("trans_year");

                    b.Property<DateTime>("WeekEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("week_end");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("week_start");

                    b.HasKey("Tenant", "Branch")
                        .HasName("pk_date_generation");

                    b.ToTable("date_generation", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.DateGenerationHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Branch")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("branch");

                    b.Property<DateTime>("TransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("trans_date");

                    b.Property<DateTime>("LastTransDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_trans_date");

                    b.Property<DateTime>("MonthEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("month_end");

                    b.Property<DateTime>("MonthStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("month_start");

                    b.Property<DateTime>("PrevDay")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("prev_day");

                    b.Property<string>("TransDay")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("trans_day");

                    b.Property<string>("TransMonth")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("trans_month");

                    b.Property<string>("TransYear")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("trans_year");

                    b.Property<DateTime>("WeekEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("week_end");

                    b.Property<DateTime>("WeekStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("week_start");

                    b.HasKey("Tenant", "Branch", "TransDate")
                        .HasName("pk_date_generation_history");

                    b.ToTable("date_generation_history", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.DialogMessage", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Lid")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("lid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("character varying(125)")
                        .HasColumnName("description");

                    b.HasKey("Code", "Lid")
                        .HasName("pk_dialog_message");

                    b.ToTable("dialog_message", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.Employer", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("region");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("telephone");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(35)
                        .IsUnicode(false)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("town");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_employer");

                    b.ToTable("employer", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.MonthName", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Lid")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("lid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.HasKey("Code", "Lid")
                        .HasName("pk_month_name");

                    b.ToTable("month_name", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.Privilege", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("MenCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("men_code");

                    b.Property<string>("App")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("app");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.Property<string>("UsrCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("usr_code");

                    b.HasKey("Tenant", "MenCode")
                        .HasName("pk_privilege");

                    b.ToTable("privilege", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.Role", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("description");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_role");

                    b.ToTable("role", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.RoleMenu", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("MenuCode")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("menu_code");

                    b.Property<string>("RoleCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("role_code");

                    b.Property<string>("App")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("app");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.HasKey("Tenant", "MenuCode", "RoleCode")
                        .HasName("pk_role_menu");

                    b.ToTable("role_menu", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.ServerStatus", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Region")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("region");

                    b.Property<string>("Runner")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner");

                    b.Property<string>("CopYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Batch")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("batch");

                    b.Property<string>("DayStatus")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("day_status");

                    b.HasKey("Tenant", "Region", "Runner", "CopYear")
                        .HasName("pk_server_status");

                    b.ToTable("server_status", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.ServerStatusHistory", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Region")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("region");

                    b.Property<string>("Runner")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("runner");

                    b.Property<string>("CopYear")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("cop_year");

                    b.Property<string>("Batch")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("batch");

                    b.Property<string>("DayStatus")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("day_status");

                    b.HasKey("Tenant", "Region", "Runner", "CopYear")
                        .HasName("pk_server_status_history");

                    b.ToTable("server_status_history", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.SystemMenu", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("code");

                    b.Property<string>("Lid")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("lid");

                    b.Property<string>("App")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("app");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("parent");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.HasKey("Code", "Lid")
                        .HasName("pk_system_menu");

                    b.ToTable("system_menu", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.Tenant", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("code");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("city");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("e_mail");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("fax");

                    b.Property<string>("PostBox")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("post_box");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("telephone");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("website");

                    b.HasKey("Code")
                        .HasName("pk_tenant");

                    b.ToTable("tenant", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.Town", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("character varying(75)")
                        .HasColumnName("description");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("region");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_town");

                    b.ToTable("town", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.User", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("code");

                    b.Property<string>("Computer")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("computer");

                    b.Property<string>("Connected")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("connected");

                    b.Property<string>("DeviceSerial")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("device_serial");

                    b.Property<string>("LogTime")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("log_time");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("photo_url");

                    b.Property<string>("UsrHash")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("usr_hash");

                    b.Property<string>("UsrName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usr_name");

                    b.HasKey("Tenant", "Code")
                        .HasName("pk_user");

                    b.ToTable("user", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.UserBranch", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("UsrCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("usr_code");

                    b.Property<string>("BranchCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("branch_code");

                    b.Property<string>("IsDefault")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("is_default");

                    b.HasKey("Tenant", "UsrCode", "BranchCode")
                        .HasName("pk_user_branch");

                    b.ToTable("user_branch", "common");
                });

            modelBuilder.Entity("Dama.Monitoring.Domain.Entity.Common.UserRole", b =>
                {
                    b.Property<string>("Tenant")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tenant");

                    b.Property<string>("RoleCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("role_code");

                    b.Property<string>("UsrCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("usr_code");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("status");

                    b.HasKey("Tenant", "RoleCode", "UsrCode")
                        .HasName("pk_user_role");

                    b.ToTable("user_role", "common");
                });
#pragma warning restore 612, 618
        }
    }
}
